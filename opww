#!/usr/bin/python3
# odd pacman wrapper wrapper
# an interesting AUR wrapper made to work when aur.archlinux.org is down
# a lot of wrapping other stuff because I can't bother actually implimenting anything.

import os
import sys
import shutil
import tempfile
import glob
from pathlib import Path

flags=""
objects=[]

if len(sys.argv) > 2:
  for i, j in zip(sys.argv, range(len(sys.argv))):
    if j==0:
       pass
    elif j==1:
       flags=i
    else:
       objects.append(i)
else:
  print("opqq ERR: No arguments passed. Example usage: opww -S hyprland-git", file=sys.stderr)
  sys.exit(1)

helper=None
# check for AUR helpers
# helper is string: name of helper
# helper is None: use git and pacman
# helper is False: Do not do ANY aur operations because you are root
for i in ["yay", "paru", "trizen", "pikaur", "aura"]:
  if shutil.which(i):
    helper=i
if helper is not None:
  print(f"opqq INFO: Found AUR helper {helper}, will use for AUR options if not down")
else:
  print("opqq WARN: No AUR helper found, updating will require having an manually maitained list of AUR packages")

# Check for root
amiroot=False
if os.geteuid() == 0:
  print("opqq WARN: Running as root... let's see if that works out.")
  print("         | AUR operations will not work.")
  print("         | It is strongly reccommended that you do not run this as root.")
  amiroot=True
  helper=False


def githubMirror(pkg, downloadOnly=False):
  cwd=os.getcwd()
  status=123456 # one two three four five six\ndoes this need to exist (no)
  try:
    for i in pkg:
      with tempfile.TemporaryDirectory() as dir:
        os.chdir(dir)
        status=os.system(f"git clone --branch {i} --single-branch https://github.com/archlinux/aur.git {i}")
        if status != 0:
          print("opqq ERR: Cloning failed. Is this a real AUR package?", file=sys.stderr)
          sys.exit(status)
        os.chdir(i)
        os.system("less PKGBUILD")
        if input("opqq ASK: Is this PKGBUILD good to run? (y/n) ").lower() != "y":
          print("opqq ERR: Aborted.", file=sys.stderr)
          sys.exit(2)
        if downloadOnly:
          status=os.system("makepkg -s")
          Path(cwd).mkdir(parents=True, exist_ok=True)
          for file in glob.glob("*.pkg.tar.zst"):
            shutil.copy(file, cwd)
        else:
          status=os.system("makepkg -si")
          if status!=0:
            print("opqq ERR: makepkg failed. Aborting.")
            sys.exit(status)
  finally:
    os.chdir(cwd)
    sys.exit(0)
def installFlow(pkg): # If -S: run -S
  print("opqq INFO: Checking if available in your repos...")
  if os.system(f"pacman -Si {' '.join(pkg)}>/dev/null") == 0:
    print(f"opqq INFO: Found packages {pkg} in your repos.")
    if amiroot:
      os.execvp("pacman", ["pacman", "-S"]+pkg)
    os.execvp("sudo", ["sudo", "pacman", "-S"]+pkg)

  if helper is False:
    print("opqq ERR: Not found in repos but you are root (uid 0) and can't do AUR operations. Please use an non root account with sudo privilages.")
    sys.exit(1)
  elif helper is None:
    # No INFO: using github mirror because no helper is found and they got the WARNing
    # We use the github mirror directly here because there really is no reason to go straight to aur.archlinux.org because the only reason I do in the first place is the benifits of using an proper AUR helper.
    githubMirror(pkg)
  else:
    print(f"opqq INFO: Attempt 1 of getting AUR package: Using {helper}.")
    status=os.system(f"{helper} -S {' '.join(pkg)}")
    if status != 0 or os.system(f"pacman -Qq {pkg[0]}") != 0:
      print("opqq ERR: AUR helper failed.")
      print("opqq INFO: Using github mirror...")
      githubMirror(pkg)
    else:
      sys.exit(0)
def uninstallFlow(pkg): # If -R: Run -Rns
  if amiroot:
    os.execvp("pacman", ["pacman", "-Rns"]+pkg)
  os.execvp("sudo", ["sudo", "pacman", "-Rns"]+pkg)
def manualFlow(pkg): # If -U: Run -U
  if amiroot:
    os.execvp("pacman", ["pacman", "-U"]+pkg)
  os.execvp("sudo", ["sudo", "pacman", "-U"]+pkg)
def downloadFlow(pkgs): # if -Sw: Run -Sw
  print("opqq INFO: Checking if available in your repos...")
  if os.system(f"pacman -Si {' '.join(pkg)}>/dev/null") == 0:
    print(f"opqq INFO: Found package {pkg} in your repos.")
    if amiroot:
      os.execvp("pacman",     ["pacman", "-Sw", "--cachedir", "."]+pkg)
    os.execvp("sudo", ["sudo", "pacman", "-Sw", "--cachedir", "."]+pkg)
  if helper is False:
    print("opqq ERR: Not found in repos but you are root (uid 0) and can't do AUR operations. Please use an non root account with sudo privilages.")
    sys.exit(1)
  elif helper is None:
    githubMirror(pkg, True)

if __name__ == "__main__":
  if "Sw" in flags:
    downloadFlow(objects)
  elif "S" in flags:
    installFlow(objects)
  elif "R" in flags:
    uninstallFlow(objects)
  elif "U" in flags:
    manualFlow(objects)
  elif "G" in flags:
    githubMirror(objects)
  else:
    print("opqq ERR: Supported flags: -S (install), -R (remove package), -Sw (download package to current directory), -U (Install .pkg.tar.zst), and -G (forcefully install from github. None were found.")
